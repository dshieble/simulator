% This file is the analytical testing wrapper for the population dynamics
% simulator. The tests contained in this file examine whether the Models
% produce the expected theoretical behavior.

% The Correctness Tests for the simulator are in the correctnessTests file
function testMathematics()
    moranTest1();
    wrightTest1();
end

function moranTest1()
    %Moran (No Mutation)
    %Propability of Fixation
    %Test the basic moran model with equal fitness values
    birthRate = [1 1];
    MM = MutationManager(0, [0.99 0.01; 0.01 0.99], 1, 0, 0);
    spatialOn = 0;
    edgesOn = randi(2) - 1;
    for matrixOn = 0:1
        popSize = 100;
        numRuns = 5*popSize;
        moranResult = zeros(1, numRuns);
        for i = 1:numRuns
            moranManager = GridManagerMoran(popSize, [(1) (popSize - 1)], MM, matrixOn, spatialOn, edgesOn, birthRate, 0);
            h = 0;
            while ~h
                [~, ~, t, h] = moranManager.getNext();
            end
            moranResult(i) = find(moranManager.totalCount(:,end));
        end
        fprintf('Moran (No Mutation): Fixation in %d out of %d runs.\n', sum(moranResult == 1), numRuns);
    end
end

function wrightTest1()
    %Wright (No Mutation)
    %Propability of Fixation
    %Test the basic wright model with equal fitness values
    fitness = [1 1];
    MM = MutationManager(0, [0.99 0.01; 0.01 0.99], 1, 0, 0);
    spatialOn = 0;
    edgesOn = randi(2) - 1;
    for matrixOn = 0:1
        popSize = 100;
        numRuns = 5*popSize;
        wrightResult = zeros(1, numRuns);
        for i = 1:numRuns
            wrightManager = GridManagerWright(popSize, [(1) (popSize - 1)], MM, matrixOn, spatialOn, edgesOn,  fitness, 0);
            h = 0;
            while ~h
                [~, ~, ~, h] = wrightManager.getNext();
            end
            wrightResult(i) = find(wrightManager.totalCount(:,end));
        end
        fprintf('Wright-Fisher (No Mutation): Fixation in %d out of %d runs.\n', sum(wrightResult == 1), numRuns);
    end
end


function wrightTest1()
    %% Test 3 -> Wright-Fisher (Probability of Beneficial Mutation Fixation)
    %Test the wright fisher model with non-equal fitness values to test
    %fixation

    % %simulating 100 replicates of N = 2500 will take a very very very long time
    N = [36];%100, 400, 625];
    s = [0.005, 0.01, 0.05, 0.1];
    fitness = [1.005 1; 1.01 1; 1.05 1; 1.1 1];
    for matrixOn = 0:1
        wright_num_fix = [];
        for i = 1:length(s)
            f = fitness(i,:);
            for j = 1:length(N)
                pfix = (1-exp(-2.*s(i)))/(1-exp(-2.*N(j).*s(i)));
                count = 0;
                for k = 1:round(100/pfix)
                    wrightManager = GridManagerWright(N(j), [(1) (N(j) - 1)], MM, matrixOn, spatialOn, edgesOn, f, 0);
                    h = 0;
                    while ~h
                        [~, ~, ~, h] = wrightManager.getNext();
                    end
                    count = count + (wrightManager.totalCount(1, wrightManager.timestep)>0);
                end
                wright_num_fix = [wright_num_fix count];
            end
        end
        for i = 1:length(wright_num_fix)
            fprintf('Wright-Fisher (Probability of Beneficial Mutation Fixation): Fixation in %d out of pfix/100 runs for s = %1.2d.\n', wright_num_fix(i), s(i));
        end
    end




% %% Test 4 -> Moran (Probability of Beneficial Mutation) 
% %Test the Moran model with non-equal fitness values to test
% %fixation
% 
% % %simulating 100 replicates of N = 2500 will take a very long time
% N = [36];%100, 400, 625];
% r = [1.005 1.01 1.05 1.1];
% br = [1.005 1; 1.01 1; 1.05 1; 1.1 1];
% for matrixOn = 0:1
%     moran_num_fix = [];
%     for i = 1:length(br)
%         b = br(i,:);
%         for j = 1:length(N)
%             pfix = (1-(1/r(i)))/(1-(1/(r(i)^N(j))));
%             count = 0;
%             for k = 1:round(100/pfix)
%                 moranManager = GridManagerMoran(N(j), [(1) (N(j) - 1)], MM, matrixOn, plottingParams, spatialOn, edgesOn, b, 0);
%                 h = 0;
%                 while ~h
%                     [~, ~, ~, h] = moranManager.getNext();
%                 end
%                 count = count + (moranManager.totalCount(1, moranManager.timestep)>0);
%             end
%             moran_num_fix = [moran_num_fix count];
%         end
%     end
% 
%     for j = 1:length(moran_num_fix)
%         fprintf('Moran (Probability of Beneficial Mutation Fixation): Fixation in %d out of pfix/100 runs for s = %d.\n', moran_num_fix(j), r(j));
%     end
% end
% %% Test 5 -> Exponential
% % Test and plot the exponential model
% 
% Ninit = [1 0];
% N_tot = 900;
% birth = [1 1];
% death = [0.01 0.01];
% counts = cell(1,100);
% for matrixOn = 0:1
%     for i = 1:100
%         exp_manager = GridManagerExp(N_tot, Ninit, MM, matrixOn, spatialOn, edgesOn, birth, death);
%         h = 0;
%         counts{i} = [];
%         t = 1;
%         while ~h && t<30
%             [~, ~, t, h] = exp_manager.getNext();
%             counts{i} = [counts{i} sum(exp_manager.totalCount(:,t))];
%         end
%     end
%     figure;
%     subplot(2,1,1)
%     r = birth(1) - death(1);
%     t = 1:10;
%     T = exp(r.*t.*log(2));
%     T(T>N_tot) = N_tot;
%     plot(T);
%     title('Exponential Theoretical');
% 
%     subplot(2,1,2)
%     for j = 1:100
%         plot(counts{j});
%         hold on;
%     end
%     title('Exponential Experimental');
% end
% 
% %% Test 6 -> Logistic
% % Test and plot the logistic model
% 
% Ninit = [1 0];
% N_tot = 225;
% birth = [1 1];
% death = [0.01 0.01];
% num_lines = 100;
% counts = cell(1,num_lines);
% num_iter = 10;
% for matrixOn = 0:1
%     for i = 1:num_lines
%         log_manager = GridManagerLogistic(N_tot, Ninit, MM, matrixOn, spatialOn, edgesOn, birth, death);
%         h = 0;
%         counts{i} = [];
%         t = 1;
%         for iter = 1:num_iter %doesn't terminate right now
%             [~, ~, t, h] = log_manager.getNext();
%             counts{i} = [counts{i} sum(log_manager.totalCount(:,t))];
%         end
%     end
%     figure;
%     subplot(2,1,1)
%     r = birth(1) - death(1);
%     t = 1:num_iter;
%     T = N_tot*exp(r.*t.*log(2))./(N_tot+exp(r.*t.*log(2)) - 1);
%     T(T>N_tot) = N_tot;
%     plot(T);
%     title('Logistic Theoretical');
% 
%     subplot(2,1,2)
%     for j = 1:num_lines
%         plot(counts{j});
%         hold on;
%     end
%     title('Logistic Experimental');
% end
